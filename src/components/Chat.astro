---
export const prerender = false;
---

<!-- Animation half -->
<div
  id="left"
  class="fixed top-10 left-0 lg:relative lg:mb-40 w-full h-1/2 lg:w-1/2 lg:h-full flex justify-center items-center overflow-hidden z-0">
  <canvas id="canvas" width="730" height="730"></canvas>
</div>

<!-- Messaging half -->
<div
  id="right"
  class="fixed bottom-0 left-0 w-full h-1/2 lg:relative lg:w-1/2 lg:h-full flex justify-center items-end">
  <div class="flex flex-col h-full w-full pb-16 lg:pb-8">
    <p id="emotion" class="hidden"></p>
    <div
      id="history"
      class="flex flex-col overflow-y-auto max-h-[calc(50vh-6rem)] lg:max-h-[calc(100vh-8rem)] px-4 [&::-webkit-scrollbar]:w-1 [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-transparent dark:[&::-webkit-scrollbar-thumb]:bg-neutral-400">
    </div>
    <div
      id="message-form"
      class="flex mt-auto items-center mx-4 border border-black dark:border-off-white border-2 rounded-full focus-within:outline focus-within:outline-2 focus-within:outline-purple-100">
      <label for="user-input" class="sr-only">Message Luna</label>
      <textarea
        id="user-input"
        name="userInput"
        rows="1"
        class="bg-transparent placeholder-black dark:placeholder-off-white w-full px-4 py-2 rounded-full sm:text-sm resize-none overflow-y-auto max-h-32 [&::-webkit-scrollbar]:w-1 [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:bg-transparent dark:[&::-webkit-scrollbar-thumb]:bg-neutral-400 focus:outline-none"
        autocomplete="off"
        placeholder="Message Luna"></textarea>
      <button
        id="submit-button"
        class="dark:text-off-white rounded-full m-2 focus-within:outline focus-within:outline-2 focus-within:outline-purple-100 hover:bg-purple-100"
        type="submit">
        <span class="sr-only">Submit</span>
        <svg
          width="40"
          height="40"
          viewBox="0 0 24 24"
          fill="none"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M22 12C22 6.477 17.523 2 12 2C6.477 2 2 6.477 2 12C2 17.523 6.477 22 12 22C17.523 22 22 17.523 22 12ZM8.47 11.53C8.32955 11.3894 8.25066 11.1988 8.25066 11C8.25066 10.8013 8.32955 10.6106 8.47 10.47L11.47 7.47C11.6106 7.32955 11.8013 7.25066 12 7.25066C12.1988 7.25066 12.3894 7.32955 12.53 7.47L15.53 10.47C15.6037 10.5387 15.6628 10.6215 15.7038 10.7135C15.7448 10.8055 15.7668 10.9048 15.7686 11.0055C15.7704 11.1062 15.7518 11.2062 15.7141 11.2996C15.6764 11.393 15.6203 11.4778 15.549 11.549C15.4778 11.6203 15.393 11.6764 15.2996 11.7141C15.2062 11.7518 15.1062 11.7704 15.0055 11.7686C14.9048 11.7668 14.8055 11.7448 14.7135 11.7038C14.6215 11.6628 14.5387 11.6037 14.47 11.53L12.75 9.81V16C12.75 16.1989 12.671 16.3897 12.5303 16.5303C12.3897 16.671 12.1989 16.75 12 16.75C11.8011 16.75 11.6103 16.671 11.4697 16.5303C11.329 16.3897 11.25 16.1989 11.25 16V9.81L9.53 11.53C9.38938 11.6705 9.19875 11.7493 9 11.7493C8.80125 11.7493 8.61063 11.6705 8.47 11.53Z"
            fill="currentColor"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  import * as rive from "@rive-app/canvas";

  // -------- RIVE STUFF --------

  // The canvas animation object
  const luna = new rive.Rive({
    src: "/luna.riv",
    canvas: document.getElementById("canvas") as HTMLCanvasElement,
    autoplay: true,
    stateMachines: "Animation State Machine",
    onLoad: () => {
      updateAnimation();
    },
  });

  // Function to update the animation based on the current emotion
  function updateAnimation() {
    console.log("updating...");
    const emotionElement = document.getElementById("emotion");
    if (emotionElement && emotionElement.textContent) {
      const emotion = emotionElement.textContent.toLowerCase();
      console.log("updated to", emotion);
      const emotionList = [
        "happiness",
        "sadness",
        "excitement",
        "sympathy",
        "anger",
        "fear",
      ];
      let animationName = "neutral";
      // if emotion is one in the possible set, fire it
      if (emotion in emotionList) {
        console.log("in list!");
        animationName = emotion;
      }
      // else fire neutral
      const inputs = luna.stateMachineInputs("Animation State Machine");
      const animation = inputs.find((i) => i.name === emotion);
      if (animation) {
        animation.fire();
      } else {
        const animation = inputs.find((i) => i.name === "sympathy");
        animation.fire();
      }
    }
  }

  // Mutation observer to detect changes to the emotion element
  const emotionElement = document.getElementById("emotion");
  if (emotionElement) {
    const observer = new MutationObserver(() => {
      updateAnimation();
    });

    observer.observe(emotionElement, { childList: true, characterData: true });
  }

  // Event listeners for listening mode
  const userInput = document.getElementById("user-input");

  userInput.addEventListener("click", function (event) {
    console.log("typing");
    const emotionElement = document.getElementById("emotion");
    if (emotionElement) {
      emotionElement.textContent = "listening";
    }
  });

  userInput.addEventListener("input", function (event) {
    console.log("typing");
    const emotionElement = document.getElementById("emotion");
    if (emotionElement) {
      emotionElement.textContent = "listening";
    }
    this.style.height = "auto";
    const maxHeight = 128;
    this.style.height = `${Math.min(this.scrollHeight, maxHeight)}px`;
  });

  // -------- AI STUFF --------

  // Initialize chat history object
  let chatHistory = [
    {
      role: "system",
      content:
        "You are Luna, a virtual support companion who is empathetic, cool, and concise. Use cognitive behavioral therapy (CBT) techniques when helpful. For each response, select the most fitting emotion from: anger, sympathy, fear, happiness, sadness, or excitement, and include it in parentheses at the beginning (e.g., '(happiness)'). Prioritize support, clarity, and understanding",
    },
  ];

  // Function to get AI response from the server-side endpoint
  async function getChatCompletion() {
    try {
      const response = await fetch("/endpoint", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ chatHistory }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch data");
      }

      return await response.json();
    } catch (error) {
      console.error("Error:", error);
      return {
        choices: [
          {
            message: {
              content:
                "Oops! I've reached my free usage limit for this month. ðŸ’” \n Thank you for spending time with me! Check back next month when the limit resets to continue our chats. In the meantime, check out these <a class='underline' href='https://www.helpguide.org/'>Mental Health Support</a> and <a class='underline' href='https://www.helpguide.org/'>Self-Help</a> resources. \n Take care, and I hope to chat with you again soon!",
            },
          },
        ],
      };
    }
  }

  // -------- MESSAGING STUFF --------

  // Function to handle sending user message and receiving response
  async function handleUserMessage(userInput) {
    chatHistory.push({ role: "user", content: userInput });
    const chatCompletion = await getChatCompletion();
    const assistantMessage =
      chatCompletion.choices[0]?.message?.content || "No response";
    chatHistory.push({ role: "assistant", content: assistantMessage });
    return assistantMessage;
  }

  // Function to display a message bubble
  async function displayBubble(role, content) {
    const historyDiv = document.getElementById("history");
    const messageDiv = document.createElement("div");
    messageDiv.classList.add("p-2", "px-4", "rounded-3xl", "max-w-xs", "mb-2");

    // Handle emotion matching
    let emotion = null;
    const emotionMatch = content.match(/^\((.*?)\)/);
    if (emotionMatch) {
      emotion = emotionMatch[1];
      content = content.replace(/^\(.*?\)\s*/, "");
      const emotionElement = document.getElementById("emotion");
      if (emotionElement) {
        emotionElement.textContent = emotion;
      }
    }

    // Add styling based on role
    if (role === "user") {
      messageDiv.classList.add(
        "border",
        "border-black",
        "dark:border-off-white",
        "border-2",
        "self-end",
        "text-black",
        "dark:text-off-white"
      );
      messageDiv.textContent = content;
    } else if (role === "assistant") {
      messageDiv.classList.add(
        "bg-black",
        "dark:bg-off-white",
        "self-start",
        "text-off-white",
        "dark:text-gray-800"
      );
      // For assistant messages, start empty
      messageDiv.innerHTML = "";
    }

    historyDiv.appendChild(messageDiv);

    // Function to smoothly scroll to the bottom
    const scrollToBottom = () => {
      const target = historyDiv.scrollHeight - historyDiv.clientHeight;
      historyDiv.scrollTo({
        top: target,
        behavior: "smooth",
      });
    };
    scrollToBottom();

    // If it's an assistant message, animate the typing
    if (role === "assistant") {
      const typingSpeed = 30;
      let currentIndex = 0;

      // Cursor element
      const cursor = document.createElement("span");
      cursor.classList.add("animate-pulse");
      cursor.textContent = "â–‹";
      messageDiv.appendChild(cursor);

      // Type out each character
      while (currentIndex < content.length) {
        await new Promise((resolve) => setTimeout(resolve, typingSpeed));
        messageDiv.innerHTML = content.slice(0, currentIndex + 1);
        messageDiv.appendChild(cursor);
        currentIndex++;

        // Scroll after each character if we're near the bottom
        const isNearBottom =
          historyDiv.scrollHeight -
            historyDiv.scrollTop -
            historyDiv.clientHeight <
          100;
        if (isNearBottom) {
          scrollToBottom();
        }
      }

      // Remove cursor after typing is complete
      cursor.remove();
      scrollToBottom();
    }
  }

  // Functionality for sending messages
  const submitButton = document.getElementById("submit-button");

  async function enterMessage() {
    const user = userInput as HTMLInputElement;
    if (user && user.value) {
      const message = user.value;
      user.value = "";
      displayBubble("user", message);
      await handleUserMessage(message);
      const response = chatHistory[chatHistory.length - 1];
      displayBubble("assistant", response.content);
    }
  }

  submitButton.addEventListener("click", function () {
    userInput.style.height = "auto";
    enterMessage();
  });

  userInput.addEventListener("keydown", function (event) {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      this.style.height = "auto";
      enterMessage();
    }
  });
</script>
